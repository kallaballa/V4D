if(NOT EMSCRIPTEN)
  find_package(glfw3 3 REQUIRED)
  find_package(OpenCL REQUIRED)
  include("FindGLEW")
  include("FindOpenGL")
else()
  pkg_check_modules (glew glew)
endif()

set(the_description "V4D Visualization Module")
set(OPENCV_MODULE_IS_PART_OF_WORLD OFF)

macro(add_emscripten_sample sample source assets)
    ocv_add_executable(${sample} ${source})
    ocv_target_include_modules(${sample} opencv_core opencv_imgproc opencv_videoio opencv_video opencv_imgcodecs opencv_v4d opencv_face opencv_tracking opencv_objdetect opencv_stitching opencv_optflow opencv_imgcodecs opencv_features2d opencv_dnn  opencv_flann)
    ocv_target_link_libraries(${sample} LINK_PRIVATE opencv_core opencv_imgproc opencv_videoio opencv_video opencv_imgcodecs
    opencv_v4d opencv_face opencv_tracking opencv_objdetect opencv_stitching opencv_optflow opencv_imgcodecs opencv_features2d opencv_dnn  opencv_flann bgfx-shared-libRelease)
    target_link_directories(${sample} PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/../../lib")
    target_compile_features(${sample} PRIVATE cxx_std_20)
    set_target_properties(${sample} PROPERTIES SUFFIX ".js")
    add_custom_command(
        TARGET ${sample} PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                "${CMAKE_CURRENT_LIST_DIR}/samples/${sample}.html"
                "${CMAKE_CURRENT_BINARY_DIR}/../../bin/${sample}.html")
    if(${assets})
      target_link_options(${sample} PRIVATE --preload-file assets)
    endif()
endmacro()

macro(add_binary_sample sample source)
    #add_executable(${sample} ${source})
    # ocv_target_include_modules(${sample} opencv_core opencv_imgproc opencv_videoio opencv_video opencv_imgcodecs opencv_v4d opencv_face opencv_tracking opencv_objdetect opencv_stitching opencv_optflow opencv_imgcodecs opencv_features2d opencv_dnn  opencv_flann)
    # ocv_target_link_libraries(${sample} LINK_PRIVATE opencv_core opencv_imgproc opencv_videoio opencv_video opencv_imgcodecs opencv_v4d opencv_face opencv_tracking opencv_objdetect opencv_stitching opencv_optflow opencv_imgcodecs opencv_features2d opencv_dnn opencv_flann bgfx-shared-libRelease)
    target_compile_features(${sample} PRIVATE cxx_std_20)
    target_link_directories(${sample} PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/../../lib" "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx/.build/linux64_gcc/bin/")
    target_include_directories(${sample} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include/opencv2/v4d/detail/" "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx/examples/common/" "${CMAKE_CURRENT_SOURCE_DIR}/third/bx/include/" "${CMAKE_CURRENT_SOURCE_DIR}/third/bimg/include/")
    target_sources(${sample} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/third/glad/src/glad.cpp")
    target_link_libraries(${sample} PRIVATE bgfx-shared-libRelease glfw OpenGL::GL GLEW::GLEW)
endmacro()

if(EMSCRIPTEN)
  # set(EM_LINKER_FLAGS "-sENVIRONMENT=web,worker -sWASM_BIGINT=1 -sOFFSCREENCANVAS_SUPPORT -sOFFSCREENCANVASES_TO_PTHREAD=#offscreenCanvas -sEXPORTED_FUNCTIONS=_main,_v4dInitCapture -sEXPORTED_RUNTIME_METHODS=ccall -sPROXY_TO_PTHREAD=1 --use-preload-plugins --preload-file doc/lena.png -sINITIAL_MEMORY=128MB -sALLOW_MEMORY_GROWTH=1 -sUSE_GLFW=3 -sMIN_WEBGL_VERSION=2 -sMAX_WEBGL_VERSION=2 --bind")
  set(EM_LINKER_FLAGS "-sENVIRONMENT=web,worker -sWASM_BIGINT=1 -sOFFSCREEN_FRAMEBUFFER -sEXPORTED_FUNCTIONS=_main,_v4dInitCapture -sEXPORTED_RUNTIME_METHODS=ccall -sPROXY_TO_PTHREAD=1 --use-preload-plugins --preload-file doc/lena.png -sINITIAL_MEMORY=128MB -sALLOW_MEMORY_GROWTH=1 -sUSE_GLFW=3 -sMIN_WEBGL_VERSION=2 -sMAX_WEBGL_VERSION=2 --bind")

  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${EM_LINKER_FLAGS}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${EM_LINKER_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EM_LINKER_FLAGS}")

  if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set(EM_DEBUG_FLAGS "-s GL_DEBUG=1 -sSTACK_OVERFLOW_CHECK=2 -sASSERTIONS=2 -sNO_DISABLE_EXCEPTION_CATCHING -sEXCEPTION_DEBUG=1")
    set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${EM_DEBUG_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${EM_DEBUG_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EM_DEBUG_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  endif()
else()
  if(NOT GLEW_FOUND)
    message(STATUS "Module opencv_v4d disabled because GLEW was not found")
    ocv_module_disable(v4d)
  endif()
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBX_CONFIG_DEBUG=0")
endif()

get_property(known_features GLOBAL PROPERTY CMAKE_CXX_KNOWN_FEATURES)
list (FIND known_features "cxx_std_20" idx)
if (${idx} LESS 0)
  message(STATUS "Module opencv_v4d disabled because it requires C++20")
  ocv_module_disable(v4d)
endif()

OCV_OPTION(OPENCV_V4D_ENABLE_ES3 "Enable OpenGL ES 3.0 backend for V4D" OFF
  VERIFY HAVE_OPENGL)

find_package(Git QUIET)
if(GIT_FOUND AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../.git")
# Update submodules as needed
  message(STATUS "Submodule update")
  execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
                  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../"
                  RESULT_VARIABLE GIT_SUBMOD_RESULT)
  if(NOT GIT_SUBMOD_RESULT EQUAL "0")
    message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
  endif()
endif()

if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx/makefile")
    message(FATAL_ERROR "The submodules were not downloaded! GIT_SUBMODULE was turned off or failed. Please update submodules and try again.")
endif()

# if (NOT (TARGET glad_v4d))
#         add_library(glad_v4d "${CMAKE_CURRENT_SOURCE_DIR}/third/glad/src/glad.cpp")
#         include_directories("${CMAKE_CURRENT_SOURCE_DIR}/third/glad/include/")
# endif()

cmake_policy(SET CMP0079 NEW)


ocv_add_module(v4d opencv_core opencv_imgproc opencv_videoio opencv_video)

ocv_glob_module_sources("${CMAKE_CURRENT_SOURCE_DIR}/src" "${CMAKE_CURRENT_SOURCE_DIR}/src/detail/" "${CMAKE_CURRENT_SOURCE_DIR}/include/opencv2/v4d" "${CMAKE_CURRENT_SOURCE_DIR}/include/opencv2/v4d/detail")
  ocv_module_include_directories("${CMAKE_CURRENT_SOURCE_DIR}/third/bx/include/" "${CMAKE_CURRENT_SOURCE_DIR}/third/bimg/include/" "${CMAKE_CURRENT_SOURCE_DIR}/third/glad/include/" "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx/examples/common/" "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx/include")
   ocv_create_module()
target_sources(${the_module} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/third/glad/src/glad.cpp")
# target_sources(${the_module} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx/examples/common/nanovg/nanovg.cpp")

ocv_add_samples(opencv_v4d opencv_core opencv_imgproc opencv_videoio opencv_video opencv_imgcodecs opencv_v4d opencv_face opencv_tracking opencv_objdetect opencv_stitching opencv_optflow opencv_imgcodecs opencv_features2d opencv_dnn opencv_flann)
set_target_properties(${the_module} PROPERTIES LINKER_LANGUAGE CXX)
add_custom_command(
                  TARGET ${the_module} PRE_BUILD
                  COMMAND make clean
                  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx")
add_custom_command(
                  TARGET ${the_module} PRE_BUILD
                  COMMAND make -j16 CXX_FLAGS='-fPIC' C_FLAGS='-fPIC' linux-release64
                  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx")
add_custom_command(
 TARGET ${the_module} POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy
   "${CMAKE_CURRENT_LIST_DIR}/doc/lena.png"
   "${CMAKE_CURRENT_BINARY_DIR}/doc/lena.png")

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/third/glad/include/")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx/include/")

if(BUILD_EXAMPLES)
  if(EMSCRIPTEN)
    add_emscripten_sample(example_v4d_display_image samples/display_image.cpp false)
    add_emscripten_sample(example_v4d_display_image_fb samples/display_image_fb.cpp false)
    add_emscripten_sample(example_v4d_vector_graphics samples/vector_graphics.cpp false)
    add_emscripten_sample(example_v4d_vector_graphics_and_fb samples/vector_graphics_and_fb.cpp false)
    add_emscripten_sample(example_v4d_render_opengl samples/render_opengl.cpp false)
    add_emscripten_sample(example_v4d_custom_source_and_sink samples/custom_source_and_sink.cpp false)
    add_emscripten_sample(example_v4d_font_rendering samples/font_rendering.cpp false)
    add_emscripten_sample(example_v4d_font_with_gui samples/font_with_gui.cpp false)
    add_emscripten_sample(example_v4d_video_editing samples/video_editing.cpp false)
    add_emscripten_sample(example_v4d_cube-demo samples/cube-demo.cpp false)
    add_emscripten_sample(example_v4d_many_cubes-demo samples/many_cubes-demo.cpp false)
    add_emscripten_sample(example_v4d_video-demo samples/video-demo.cpp false)
    add_emscripten_sample(example_v4d_nanovg-demo samples/nanovg-demo.cpp false)
    add_emscripten_sample(example_v4d_font-demo samples/font-demo.cpp false)
    add_emscripten_sample(example_v4d_shader-demo samples/shader-demo.cpp false)
    add_emscripten_sample(example_v4d_pedestrian-demo samples/pedestrian-demo.cpp false)
    add_emscripten_sample(example_v4d_optflow-demo samples/optflow-demo.cpp false)
    add_emscripten_sample(example_v4d_beauty-demo samples/beauty-demo.cpp true)
  else()
    add_binary_sample(example_v4d_display_image samples/display_image.cpp)
    add_binary_sample(example_v4d_display_image_fb samples/display_image_fb.cpp)
    add_binary_sample(example_v4d_vector_graphics samples/vector_graphics.cpp)
    add_binary_sample(example_v4d_vector_graphics_and_fb samples/vector_graphics_and_fb.cpp)
    add_binary_sample(example_v4d_render_opengl samples/render_opengl.cpp)
    add_binary_sample(example_v4d_custom_source_and_sink samples/custom_source_and_sink.cpp)
    add_binary_sample(example_v4d_font_rendering samples/font_rendering.cpp)
    add_binary_sample(example_v4d_font_with_gui samples/font_with_gui.cpp)
    add_binary_sample(example_v4d_video_editing samples/video_editing.cpp)
    add_binary_sample(example_v4d_cube-demo samples/cube-demo.cpp)
    add_binary_sample(example_v4d_many_cubes-demo samples/many_cubes-demo.cpp)
    add_binary_sample(example_v4d_video-demo samples/video-demo.cpp)
    add_binary_sample(example_v4d_nanovg-demo samples/nanovg-demo.cpp)
    add_binary_sample(example_v4d_font-demo samples/font-demo.cpp)
    add_binary_sample(example_v4d_shader-demo samples/shader-demo.cpp)
    add_binary_sample(example_v4d_pedestrian-demo samples/pedestrian-demo.cpp)
    add_binary_sample(example_v4d_optflow-demo samples/optflow-demo.cpp)
    add_binary_sample(example_v4d_beauty-demo samples/beauty-demo.cpp)
  endif()
endif()


if(EMSCRIPTEN)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
elseif(OPENCV_V4D_ENABLE_ES3)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCV_V4D_USE_ES3=1")
else()
endif()


target_compile_features(${the_module} PRIVATE cxx_std_20)
ocv_warnings_disable(CMAKE_CXX_FLAGS -Wdeprecated-enum-enum-conversion)
target_link_directories(${the_module} PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/../../lib" "${CMAKE_CURRENT_SOURCE_DIR}/third/bgfx/.build/linux64_gcc/bin/")

if(EMSCRIPTEN)
  ocv_target_link_libraries(${the_module} bgfx-shared-libRelease)
else()
  ocv_target_link_libraries(${the_module} OpenCL::OpenCL bgfx-shared-libRelease -lexample-commonRelease glfw GLEW::GLEW OpenGL::GLU OpenGL::OpenGL -lglad_v4d)
endif()
